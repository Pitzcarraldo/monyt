{"version":3,"sources":["../../src/logger/Log4jsLogger.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB;;;;+BAGD;AAChB,uBAAO,SAAP,CAAiB,EAAE,mCAAF,EAAjB,EADgB;AAEhB,8BAFgB;;;;kCAKG,SAAS;AAC5B,UAAM,SAAS,aAAa,IAAb,CAAkB,SAAlB,CAA4B,QAAQ,QAAR,CAArC,CADsB;AAE5B,aAAO,QAAP,CAAgB,QAAQ,KAAR,CAAhB,CAF4B;AAG5B,cAAQ,cAAR,IAA0B,aAAa,IAAb,CAAkB,cAAlB,CAAiC,MAAjC,CAA1B,CAH4B;AAI5B,aAAO,MAAP,CAJ4B;;;;gCAOX,UAAU;AAC3B,mBAAa,IAAb,CAAkB,WAAlB,CAA8B,QAA9B,EAD2B;;;;sCAIQ;wCAAX;;OAAW;;AACnC,mBAAa,IAAb,CAAkB,SAAlB,CAA4B,EAAE,qBAAgB,UAAhB,EAA9B,EADmC;;;;;;;;;;;;;oCAWF;UAAd,gEAAU,kBAAI;;AACjC,UAAM,SAAS,IAAI,YAAJ,CAAiB,EAAE,UAAU,QAAQ,QAAR,IAAoB,SAApB,EAA7B,CAAT,CAD2B;AAEjC,UAAM,QAAQ,QAAQ,KAAR,IAAiB,MAAjB,CAFmB;AAGjC,UAAM,SAAS,QAAQ,MAAR,IAAkB,0DAAlB,CAHkB;AAIjC,aAAO,aAAa,IAAb,CAAkB,aAAlB,CAAgC,MAAhC,EAAwC,EAAE,YAAF,EAAS,cAAT,EAAxC,CAAP,CAJiC;;;;;;;;;;;;;8BAclB,SAAS;AACxB,aAAO,IAAI,YAAJ,CAAiB,OAAjB,CAAP,CADwB;;;;;;;;;;;;;AAW1B,WAvDmB,YAuDnB,GAAiF;QAArE,gEAAU,EAAE,UAAU,KAAV,EAAiB,OAAO,MAAP,EAAe,gBAAgB,KAAhB,kBAAyB;wCAvD9D,cAuD8D;wFAvD9D,yBAwDX,EAAE,QAAQ,aAAa,aAAb,CAA2B,OAA3B,CAAR,KADuE;GAAjF;;SAvDmB;;;aACZ,OAAO,aAAa,QAAb;kBADK","file":"Log4jsLogger.js","sourcesContent":["import log4js from 'log4js';\nimport Logger from './Logger';\nimport { DEFAULT_APPENDERS } from './appenders/index';\n\nexport default class Log4jsLogger extends Logger {\n  static CORE = Log4jsLogger.initCore();\n\n  static initCore() {\n    log4js.configure({ appenders: DEFAULT_APPENDERS });\n    return log4js;\n  }\n\n  static getCoreLogger(options) {\n    const logger = Log4jsLogger.CORE.getLogger(options.category);\n    logger.setLevel(options.level);\n    options.replaceConsole && Log4jsLogger.CORE.replaceConsole(logger);\n    return logger;\n  }\n\n  static addAppender(appender) {\n    Log4jsLogger.CORE.addAppender(appender);\n  }\n\n  static replaceAppender(...appenders) {\n    Log4jsLogger.CORE.configure({ appenders: [ ...appenders ] });\n  }\n\n  /**\n   * @param {Object} [options={}] - Options to setup logMiddleware().\n   * @param {string} [options.category=request] - Category name of request logger.\n   * @param {string} [options.category=auto] - Level to log.\n   * @param {string} [options.format=:method :url :status :content-length - :response-time ms] - Log format of request logger.\n   * @returns {Function} connect/express middleware to logging requests.\n   */\n  static logMiddleware(options = {}) {\n    const logger = new Log4jsLogger({ category: options.category || 'request' });\n    const level = options.level || 'auto';\n    const format = options.format || ':method :url :status :content-length - :response-time ms';\n    return Log4jsLogger.CORE.connectLogger(logger, { level, format });\n  }\n\n  /**\n   * @param {Object} [options={category: 'app', level: 'info', replaceConsole: false}] - Options to initialize logger instance.\n   * @param {string} [options.category=app] - Category of logger.\n   * @param {string} [options.level=info] - Level to log.\n   * @param {boolean} [options.replaceConsole=false] - Flag to switch replaceConsole options.\n   * @returns {Log4jsLogger} - new Log4jsLogger Instance.\n   */\n  static getLogger(options) {\n    return new Log4jsLogger(options);\n  }\n\n  /**\n   * @param {Object} [options={category: 'app', level: 'info', replaceConsole: false}] - Options to initialize logger instance.\n   * @param {string} [options.category=app] - Category of logger.\n   * @param {string} [options.level=info] - Level to log.\n   * @param {boolean} [options.replaceConsole=false] - Flag to switch replaceConsole options.\n   * @returns {Log4jsLogger} - new Log4jsLogger Instance.\n   */\n  constructor(options = { category: 'app', level: 'info', replaceConsole: false }) {\n    super({ logger: Log4jsLogger.getCoreLogger(options) });\n  }\n}\n"]}