{"version":3,"sources":["../../src/logger/Logger.js"],"names":[],"mappings":";;;;;;;;;;;;IAAqB;;;;;;;;;;;;AAYnB,SAZmB,MAYnB,GAA0B;MAAd,gEAAU,kBAAI;sCAZP,QAYO;MAChB,SAAW,QAAX,OADgB;;AAExB,MAAI,CAAC,MAAD,EAAS;AACX,UAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN,CADW;GAAb;AAGA,GAAE,OAAF,EAAW,OAAX,EAAoB,MAApB,EAA4B,MAA5B,EAAoC,OAApC,EAA6C,OAA7C,EAAuD,MAAvD,CAA8D,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC7E,QAAI,CAAC,OAAO,KAAP,CAAD,EAAgB;AAClB,YAAM,IAAI,KAAJ,+BAAsC,YAAtC,CAAN,CADkB;KAApB;AAGA,SAAK,KAAL,IAAc;aAAa,OAAO,MAAP;KAAb,CAJ+D;AAK7E,WAAO,IAAP,CAL6E;GAAjB,EAM3D,IANH,EALwB;CAA1B;;kBAZmB","file":"Logger.js","sourcesContent":["export default class Logger {\n  /**\n   * @param {Object} options - Options to construct Logger instance.\n   * @param {Object} options.logger - Core logger to initialize Logger.\n   * @param {Function} options.logger.trace - log method for trace level.\n   * @param {Function} options.logger.debug - log method for debug level.\n   * @param {Function} options.logger.info - log method for info level.\n   * @param {Function} options.logger.warn - log method for warn level.\n   * @param {Function} options.logger.error - log method for error level.\n   * @param {Function} options.logger.fatal - log method for fatal level.\n   * @returns {Logger} - new Logger Instance.\n   */\n  constructor(options = {}) {\n    const { logger } = options;\n    if (!logger) {\n      throw new Error('Initialize Error. logger is empty.');\n    }\n    [ 'trace', 'debug', 'info', 'warn', 'error', 'fatal' ].reduce((self, level) => {\n      if (!logger[level]) {\n        throw new Error(`Not Implemented : logger.${level}()`);\n      }\n      self[level] = (...logs) => logger[level](...logs);\n      return self;\n    }, this);\n  }\n}\n"]}