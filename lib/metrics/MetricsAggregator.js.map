{"version":3,"sources":["../../src/metrics/MetricsAggregator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;IAEqB;;;;;;;;;AAQnB,WARmB,iBAQnB,GAA0B;QAAd,gEAAU,kBAAI;wCARP,mBAQO;;AACxB,SAAK,MAAL,GAAc,QAAQ,MAAR,IAAkB,EAAlB,CADU;AAExB,SAAK,SAAL,GAAiB,QAAQ,SAAR,IAAqB,EAArB,CAFO;AAGxB,SAAK,QAAL,GAAgB,QAAQ,QAAR,+BAAhB,CAHwB;AAIxB,SAAK,QAAL,GAAgB,EAAhB,CAJwB;GAA1B;;6BARmB;;gCAeP;;;AACV,aAAO,KAAK,SAAL,CAAe,MAAf,CAAsB,UAAC,SAAD,EAAY,OAAZ,EAAwB;AACnD,kBAAU,MAAK,MAAL,GAAc,QAAQ,OAAR,EAAd,CAAV,GAA6C,QAAQ,QAAR,EAA7C,CADmD;AAEnD,eAAO,SAAP,CAFmD;OAAxB,EAG3B,EAHK,CAAP,CADU;;;;2BAOL,UAAU;;;AACf,WAAK,QAAL,GAAgB,YAAY,YAAI;AAC9B,oBAAY,SAAS,OAAK,SAAL,EAAT,CAAZ,CAD8B;OAAJ,EAEzB,KAAK,QAAL,CAFH,CADe;AAIf,aAAO,KAAK,QAAL,CAJQ;;;;2BAOV;AACL,aAAO,cAAc,KAAK,QAAL,CAArB,CADK;;;;qCAIU;AACf,UAAM,gBAAgB,KAAK,SAAL,CAAe,IAAf,CAAoB;eAAW,QAAQ,IAAR,KAAiB,cAAjB;OAAX,CAApC,CADS;AAEf,UAAM,cAAc,KAAK,SAAL,CAAe,IAAf,CAAoB;eAAW,QAAQ,IAAR,KAAiB,YAAjB;OAAX,CAAlC,CAFS;AAGf,aAAO,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AACzB,yBAAiB,cAAc,IAAd,IAAsB,cAAc,IAAd,EAAvC,CADyB;AAEzB,YAAI,IAAI,UAAJ,IAAkB,GAAlB,EAAuB;AACzB,yBAAe,YAAY,IAAZ,IAAoB,YAAY,IAAZ,EAAnC,CADyB;SAA3B;AAGA,eALyB;OAApB,CAHQ;;;SAjCE","file":"MetricsAggregator.js","sourcesContent":["import { DEFAULT_INTERVAL } from '../constants';\n\nexport default class MetricsAggregator {\n  /**\n   * @param {Object} [options={}] - Options to initialize MetricsAggregator.\n   * @param {string} [options.prefix=''] - Prefix of metrics name.\n   * @param {Array} [options.metricses=[]] - Metricses to aggregate.\n   * @param {number} [options.interval=30000] - Interval to aggregate.\n   * @returns {MetricsAggregator} - new MetricsAggregator Instance.\n   */\n  constructor(options = {}) {\n    this.prefix = options.prefix || '';\n    this.metricses = options.metricses || [];\n    this.interval = options.interval || DEFAULT_INTERVAL;\n    this.listener = '';\n  }\n\n  aggregate() {\n    return this.metricses.reduce((metricses, metrics) => {\n      metricses[this.prefix + metrics.getName()] = metrics.getValue();\n      return metricses;\n    },{});\n  }\n\n  listen(callback) {\n    this.listener = setInterval(()=>{\n      callback && callback(this.aggregate());\n    }, this.interval);\n    return this.listener;\n  }\n\n  stop() {\n    return clearInterval(this.listener);\n  }\n\n  markMiddleware() {\n    const requestMarker = this.metricses.find(metrics => metrics.name === 'requestCount');\n    const errorMarker = this.metricses.find(metrics => metrics.name === 'errorCount');\n    return (req, res, next) => {\n      requestMarker && requestMarker.mark && requestMarker.mark();\n      if (res.statusCode >= 400) {\n        errorMarker && errorMarker.mark && errorMarker.mark();\n      }\n      next();\n    };\n  }\n}\n"]}