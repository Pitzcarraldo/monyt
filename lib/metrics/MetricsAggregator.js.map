{"version":3,"sources":["../../src/metrics/MetricsAggregator.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;IAEqB,iB;;;;;;;;;AAQnB,+BAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;;AACxB,SAAK,MAAL,GAAc,QAAQ,MAAR,IAAkB,EAAhC;AACA,SAAK,SAAL,GAAiB,QAAQ,SAAR,IAAqB,EAAtC;AACA,SAAK,QAAL,GAAgB,QAAQ,QAAR,+BAAhB;AACA,SAAK,QAAL,GAAgB,EAAhB;AACD;;;;gCAEW;AAAA;;AACV,aAAO,KAAK,SAAL,CAAe,MAAf,CAAsB,UAAC,SAAD,EAAY,OAAZ,EAAwB;AACnD,kBAAU,MAAK,MAAL,GAAc,QAAQ,OAAR,EAAxB,IAA6C,QAAQ,QAAR,EAA7C;AACA,eAAO,SAAP;AACD,OAHM,EAGL,EAHK,CAAP;AAID;;;2BAEM,Q,EAAU;AAAA;;AACf,WAAK,QAAL,GAAgB,YAAY,YAAI;AAC9B,oBAAY,SAAS,OAAK,SAAL,EAAT,CAAZ;AACD,OAFe,EAEb,KAAK,QAFQ,CAAhB;AAGA,aAAO,KAAK,QAAZ;AACD;;;2BAEM;AACL,aAAO,cAAc,KAAK,QAAnB,CAAP;AACD;;;qCAEgB;AACf,UAAM,gBAAgB,KAAK,SAAL,CAAe,IAAf,CAAoB;AAAA,eAAW,QAAQ,IAAR,KAAiB,cAA5B;AAAA,OAApB,CAAtB;AACA,UAAM,cAAc,KAAK,SAAL,CAAe,IAAf,CAAoB;AAAA,eAAW,QAAQ,IAAR,KAAiB,YAA5B;AAAA,OAApB,CAApB;AACA,aAAO,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AACzB,yBAAiB,cAAc,IAA/B,IAAuC,cAAc,IAAd,EAAvC;AACA,YAAI,IAAI,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,yBAAe,YAAY,IAA3B,IAAmC,YAAY,IAAZ,EAAnC;AACD;AACD;AACD,OAND;AAOD;;;;;kBA3CkB,iB","file":"MetricsAggregator.js","sourcesContent":["import { DEFAULT_INTERVAL } from '../constants';\n\nexport default class MetricsAggregator {\n  /**\n   * @param {Object} [options={}] - Options to initialize MetricsAggregator.\n   * @param {string} [options.prefix=''] - Prefix of metrics name.\n   * @param {Array} [options.metricses=[]] - Metricses to aggregate.\n   * @param {number} [options.interval=30000] - Interval to aggregate.\n   * @returns {MetricsAggregator} - new MetricsAggregator Instance.\n   */\n  constructor(options = {}) {\n    this.prefix = options.prefix || '';\n    this.metricses = options.metricses || [];\n    this.interval = options.interval || DEFAULT_INTERVAL;\n    this.listener = '';\n  }\n\n  aggregate() {\n    return this.metricses.reduce((metricses, metrics) => {\n      metricses[this.prefix + metrics.getName()] = metrics.getValue();\n      return metricses;\n    },{});\n  }\n\n  listen(callback) {\n    this.listener = setInterval(()=>{\n      callback && callback(this.aggregate());\n    }, this.interval);\n    return this.listener;\n  }\n\n  stop() {\n    return clearInterval(this.listener);\n  }\n\n  markMiddleware() {\n    const requestMarker = this.metricses.find(metrics => metrics.name === 'requestCount');\n    const errorMarker = this.metricses.find(metrics => metrics.name === 'errorCount');\n    return (req, res, next) => {\n      requestMarker && requestMarker.mark && requestMarker.mark();\n      if (res.statusCode >= 400) {\n        errorMarker && errorMarker.mark && errorMarker.mark();\n      }\n      next();\n    };\n  }\n}\n"]}