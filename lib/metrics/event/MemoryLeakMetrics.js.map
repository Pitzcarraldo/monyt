{"version":3,"sources":["../../../src/metrics/event/MemoryLeakMetrics.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqB,iB;;;AACnB,+BAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;;AAAA;;AAExB,UAAK,IAAL,GAAY,YAAZ;AACA,UAAK,KAAL,GAAa,EAAb;AACA,UAAK,QAAL,GAAgB,QAAQ,QAAR,IAAoB,KAApC;AACA,UAAK,MAAL;AALwB;AAMzB;;;;6BAEQ;AAAA;;AACP,6BAAS,EAAT,CAAY,MAAZ,EAAoB,iBAAS;AAC3B,0DAAiC,KAAjC;AACA,eAAK,KAAL,GAAa,KAAb;AACA,YAAI,OAAK,QAAT,EAAmB;AACjB,6BAAS,aAAT,CAAuB,UAAC,GAAD,EAAM,QAAN,EAAmB;AACxC,gBAAI,GAAJ,EAAS;AACP,2DAA4B,GAA5B;AACA;AACD;AACD,6DAAgC,QAAhC;AACD,WAND;AAOD;AACF,OAZD;AAaD;;;+BAEU;AACT,UAAM,mCAAa,KAAK,KAAlB,CAAN;AACA,WAAK,KAAL,GAAa,EAAb;AACA,aAAO,KAAP;AACD;;;;;kBA7BkB,iB","file":"MemoryLeakMetrics.js","sourcesContent":["import memwatch from 'memwatch-next';\nimport heapdump from 'heapdump';\nimport Metrics from '../Metrics';\nimport warning from '../../warning';\n\nexport default class MemoryLeakMetrics extends Metrics {\n  constructor(options = {}) {\n    super();\n    this.name = 'memoryLeak';\n    this.value = {};\n    this.autoDump = options.autoDump || false;\n    this.listen();\n  }\n\n  listen() {\n    memwatch.on('leak', stats => {\n      warning(`Detected Memory Leaks ${stats}`);\n      this.value = stats;\n      if (this.autoDump) {\n        heapdump.writeSnapshot((err, filename) => {\n          if (err) {\n            warning(`Heap Dump Failed ${err}`);\n            return;\n          }\n          warning(`Heap Dump Written To ${filename}`);\n        });\n      }\n    });\n  }\n\n  getValue() {\n    const value = { ...this.value };\n    this.value = {};\n    return value;\n  }\n}\n"]}