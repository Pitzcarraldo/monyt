{"version":3,"sources":["../src/Monyt.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB;;;;;;;;;;;;;;AAanB,WAbmB,KAanB,GAA0B;QAAd,gEAAU,kBAAI;wCAbP,OAaO;;AACxB,SAAK,QAAL,GAAgB,QAAQ,QAAR,+BAAhB,CADwB;AAExB,SAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,EAAnB,CAFS;AAGxB,SAAK,QAAL,GAAgB,EAAhB,CAHwB;AAIxB,SAAK,UAAL,GAAkB,QAAQ,UAAR,IAAsB,2DAA2B,WAAS,UAAU,KAAK,QAAL,GAA9C,CAAtB,CAJM;AAKxB,SAAK,cAAL,GAAsB,QAAQ,cAAR,IAA0B,KAA1B,CALE;AAMxB,YAAQ,MAAR,IAAkB,wBAAc,UAAd,CAAyB,QAAQ,MAAR,CAA3C,CANwB;GAA1B;;;;;;;;;;6BAbmB;;2BA4BZ,UAAU;;;AACf,WAAK,cAAL,IAAuB,KAAK,SAAL,CAAe,EAAE,gBAAgB,KAAK,cAAL,EAAjC,CAAvB,CADe;AAEf,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,SAAD,EAAc;AAC1C,0BAAQ,GAAR,CAAY,MAAK,OAAL,CAAa,GAAb,CAAiB;iBAAU,OAAO,IAAP,CAAY,SAAZ;SAAV,CAA7B,EACG,IADH,CACQ;iBAAW,YAAY,SAAS,kBAAQ,OAAR,CAAgB,OAAhB,CAAT,CAAZ;SAAX,CADR,CAEG,KAFH,CAES;iBAAS,YAAY,SAAS,kBAAQ,MAAR,CAAe,KAAf,CAAT,CAAZ;SAAT,CAFT,CAD0C;OAAd,CAA9B,CAFe;;;;;;;;;;2BAaV;AACL,aAAO,KAAK,UAAL,CAAgB,IAAhB,EAAP,CADK;;;;;;;;;;;;;8BAWG,SAAS;AACjB,aAAO,wBAAc,SAAd,CAAwB,OAAxB,CAAP,CADiB;;;;;;;;;kCAOL;AACZ,aAAO,CAAE,KAAK,UAAL,CAAgB,cAAhB,EAAF,EAAoC,wBAAc,aAAd,EAApC,CAAP,CADY;;;SA3DK","file":"Monyt.js","sourcesContent":["import { DEFAULT_INTERVAL } from './constants';\nimport LoggerFactory from './logger/LoggerFactory';\nimport MetricsAggregator from './metrics/MetricsAggregator';\n\nexport default class Monyt {\n  /**\n   * @param {Object} [options={}] - Options to initialize Monyt.\n   * @param {string} [options.interval=30000] - Interval to listen aggregate.\n   * @param {Array<Metrics>} [options.metricses=[]] - List of Metrics to aggregate.\n   * @param {Array<Sender>} [options.senders=[]] - List of sender to send metricses.\n   * @param {Promise} [options.listener=new Promise()] - Listener of MetricsAggregator.\n   * @param {string} [options.prefix=''] - Prefix of metrics name.\n   * @param {Object} [options.aggregator=new MetricsAggregator({...options, interval: this.interval})] - Instance of MetricsAggregator.\n   * @param {Logger} [options.logger=LoggerFactory.FACTORY] - Logger Class to use.\n   * @param {boolean} [options.replaceConsole=false] - Replace Console with Logger.\n   * @return {Monyt} - new Monyt Instances.\n   */\n  constructor(options = {}) {\n    this.interval = options.interval || DEFAULT_INTERVAL;\n    this.senders = options.senders || [];\n    this.listener = '';\n    this.aggregator = options.aggregator || new MetricsAggregator({ ...options, interval: this.interval });\n    this.replaceConsole = options.replaceConsole || false;\n    options.logger && LoggerFactory.setFactory(options.logger);\n  }\n\n  /**\n   * Start to aggregate and send metricses.\n   * Replace Console to default logger when replaceConsole is true.\n   * @param {Function} callback - callback function that returns result promises of senders.\n   * @returns {Number} - interval listener id.\n   */\n  listen(callback) {\n    this.replaceConsole && this.getLogger({ replaceConsole: this.replaceConsole });\n    return this.aggregator.listen((metricses)=> {\n      Promise.all(this.senders.map(sender => sender.send(metricses)))\n        .then(results => callback && callback(Promise.resolve(results)))\n        .catch(error => callback && callback(Promise.reject(error)));\n    });\n  }\n\n  /**\n   * Stop to listen.\n   * @returns {Number} - result of clearListener.\n   */\n  stop() {\n    return this.aggregator.stop();\n  }\n\n  /**\n   * @param {Object} [options={}] - Options to initialize logger instance.\n   * @param {string} [options.category=app] - Category of logger.\n   * @param {string} [options.level=info] - Level to log.\n   * @param {boolean} [options.replaceConsole=false] - Flag to switch replaceConsole options.\n   * @returns {Logger} logger - Default logger instance.\n   */\n  getLogger(options) {\n    return LoggerFactory.getLogger(options);\n  }\n\n  /**\n   * @returns {Array} middlewares - List of middlewares to mark and log requests and errors.\n   */\n  middlewares() {\n    return [ this.aggregator.markMiddleware(), LoggerFactory.logMiddleware() ];\n  }\n}\n"]}