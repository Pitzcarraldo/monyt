{"version":3,"sources":["../src/Monyt.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;IAEqB,K;;;;;;;;;;;;;;AAanB,mBAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;;AACxB,SAAK,QAAL,GAAgB,QAAQ,QAAR,+BAAhB;AACA,SAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,EAAlC;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,UAAL,GAAkB,QAAQ,UAAR,IAAsB,2DAA2B,OAA3B,IAAoC,UAAU,KAAK,QAAnD,IAAxC;AACA,SAAK,cAAL,GAAsB,QAAQ,cAAR,IAA0B,KAAhD;AACA,YAAQ,MAAR,IAAkB,wBAAc,UAAd,CAAyB,QAAQ,MAAjC,CAAlB;AACD;;;;;;;;;;;;2BAQM,Q,EAAU;AAAA;;AACf,WAAK,cAAL,IAAuB,KAAK,SAAL,CAAe,EAAE,gBAAgB,KAAK,cAAvB,EAAf,CAAvB;AACA,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,SAAD,EAAc;AAC1C,0BAAQ,GAAR,CAAY,MAAK,OAAL,CAAa,GAAb,CAAiB;AAAA,iBAAU,OAAO,IAAP,CAAY,SAAZ,CAAV;AAAA,SAAjB,CAAZ,EACG,IADH,CACQ;AAAA,iBAAW,YAAY,SAAS,kBAAQ,OAAR,CAAgB,OAAhB,CAAT,CAAvB;AAAA,SADR,EAEG,KAFH,CAES;AAAA,iBAAS,YAAY,SAAS,kBAAQ,MAAR,CAAe,KAAf,CAAT,CAArB;AAAA,SAFT;AAGD,OAJM,CAAP;AAKD;;;;;;;;;2BAMM;AACL,aAAO,KAAK,UAAL,CAAgB,IAAhB,EAAP;AACD;;;;;;;;;;;;8BASS,O,EAAS;AACjB,aAAO,wBAAc,SAAd,CAAwB,OAAxB,CAAP;AACD;;;;;;;;kCAKa;AACZ,aAAO,CAAE,KAAK,UAAL,CAAgB,cAAhB,EAAF,EAAoC,wBAAc,aAAd,EAApC,CAAP;AACD;;;;;kBA7DkB,K","file":"Monyt.js","sourcesContent":["import { DEFAULT_INTERVAL } from './constants';\nimport LoggerFactory from './logger/LoggerFactory';\nimport MetricsAggregator from './metrics/MetricsAggregator';\n\nexport default class Monyt {\n  /**\n   * @param {Object} [options={}] - Options to initialize Monyt.\n   * @param {string} [options.interval=30000] - Interval to listen aggregate.\n   * @param {Array<Metrics>} [options.metricses=[]] - List of Metrics to aggregate.\n   * @param {Array<Sender>} [options.senders=[]] - List of sender to send metricses.\n   * @param {Promise} [options.listener=new Promise()] - Listener of MetricsAggregator.\n   * @param {string} [options.prefix=''] - Prefix of metrics name.\n   * @param {Object} [options.aggregator=new MetricsAggregator({...options, interval: this.interval})] - Instance of MetricsAggregator.\n   * @param {Logger} [options.logger=LoggerFactory.FACTORY] - Logger Class to use.\n   * @param {boolean} [options.replaceConsole=false] - Replace Console with Logger.\n   * @return {Monyt} - new Monyt Instances.\n   */\n  constructor(options = {}) {\n    this.interval = options.interval || DEFAULT_INTERVAL;\n    this.senders = options.senders || [];\n    this.listener = '';\n    this.aggregator = options.aggregator || new MetricsAggregator({ ...options, interval: this.interval });\n    this.replaceConsole = options.replaceConsole || false;\n    options.logger && LoggerFactory.setFactory(options.logger);\n  }\n\n  /**\n   * Start to aggregate and send metricses.\n   * Replace Console to default logger when replaceConsole is true.\n   * @param {Function} callback - callback function that returns result promises of senders.\n   * @returns {Number} - interval listener id.\n   */\n  listen(callback) {\n    this.replaceConsole && this.getLogger({ replaceConsole: this.replaceConsole });\n    return this.aggregator.listen((metricses)=> {\n      Promise.all(this.senders.map(sender => sender.send(metricses)))\n        .then(results => callback && callback(Promise.resolve(results)))\n        .catch(error => callback && callback(Promise.reject(error)));\n    });\n  }\n\n  /**\n   * Stop to listen.\n   * @returns {Number} - result of clearListener.\n   */\n  stop() {\n    return this.aggregator.stop();\n  }\n\n  /**\n   * @param {Object} [options={}] - Options to initialize logger instance.\n   * @param {string} [options.category=app] - Category of logger.\n   * @param {string} [options.level=info] - Level to log.\n   * @param {boolean} [options.replaceConsole=false] - Flag to switch replaceConsole options.\n   * @returns {Logger} logger - Default logger instance.\n   */\n  getLogger(options) {\n    return LoggerFactory.getLogger(options);\n  }\n\n  /**\n   * @returns {Array} middlewares - List of middlewares to mark and log requests and errors.\n   */\n  middlewares() {\n    return [ this.aggregator.markMiddleware(), LoggerFactory.logMiddleware() ];\n  }\n}\n"]}